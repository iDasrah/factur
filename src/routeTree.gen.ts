/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DocumentsIndexRouteImport } from './routes/documents/index'
import { Route as CustomersIndexRouteImport } from './routes/customers/index'
import { Route as QuotesQuoteIdRouteImport } from './routes/quotes.$quoteId'
import { Route as CustomersCustomerIdRouteImport } from './routes/customers/$customerId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentsIndexRoute = DocumentsIndexRouteImport.update({
  id: '/documents/',
  path: '/documents/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersIndexRoute = CustomersIndexRouteImport.update({
  id: '/customers/',
  path: '/customers/',
  getParentRoute: () => rootRouteImport,
} as any)
const QuotesQuoteIdRoute = QuotesQuoteIdRouteImport.update({
  id: '/quotes/$quoteId',
  path: '/quotes/$quoteId',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersCustomerIdRoute = CustomersCustomerIdRouteImport.update({
  id: '/customers/$customerId',
  path: '/customers/$customerId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/quotes/$quoteId': typeof QuotesQuoteIdRoute
  '/customers': typeof CustomersIndexRoute
  '/documents': typeof DocumentsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/quotes/$quoteId': typeof QuotesQuoteIdRoute
  '/customers': typeof CustomersIndexRoute
  '/documents': typeof DocumentsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/quotes/$quoteId': typeof QuotesQuoteIdRoute
  '/customers/': typeof CustomersIndexRoute
  '/documents/': typeof DocumentsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/customers/$customerId'
    | '/quotes/$quoteId'
    | '/customers'
    | '/documents'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/customers/$customerId'
    | '/quotes/$quoteId'
    | '/customers'
    | '/documents'
  id:
    | '__root__'
    | '/'
    | '/customers/$customerId'
    | '/quotes/$quoteId'
    | '/customers/'
    | '/documents/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CustomersCustomerIdRoute: typeof CustomersCustomerIdRoute
  QuotesQuoteIdRoute: typeof QuotesQuoteIdRoute
  CustomersIndexRoute: typeof CustomersIndexRoute
  DocumentsIndexRoute: typeof DocumentsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents/': {
      id: '/documents/'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof DocumentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/': {
      id: '/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/quotes/$quoteId': {
      id: '/quotes/$quoteId'
      path: '/quotes/$quoteId'
      fullPath: '/quotes/$quoteId'
      preLoaderRoute: typeof QuotesQuoteIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/$customerId': {
      id: '/customers/$customerId'
      path: '/customers/$customerId'
      fullPath: '/customers/$customerId'
      preLoaderRoute: typeof CustomersCustomerIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CustomersCustomerIdRoute: CustomersCustomerIdRoute,
  QuotesQuoteIdRoute: QuotesQuoteIdRoute,
  CustomersIndexRoute: CustomersIndexRoute,
  DocumentsIndexRoute: DocumentsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
